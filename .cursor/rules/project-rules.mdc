
# TestFlight PM Project Rules

## üéØ Project Management & Linear Integration

### Linear SDK as Single Source of Truth
- **ALWAYS** check Linear for existing issues before starting any development task
- **REQUIRED**: Create Linear issues for any new development work using `LinearClient.createIssueFromTestFlight()`
- **REQUIRED**: Update Linear issue status using `LinearClient.updateIssueStatus()` when work is completed
- **REQUIRED**: Use Linear issue IDs in commit messages (format: `[VJ-##] Description`)
- **REQUIRED**: Reference Linear issues in PR descriptions and code comments when relevant

### Task Management Workflow
1. **Before Starting Work**: Search Linear for existing issues using `LinearClient.getRecentIssues()` or `LinearClient.findDuplicateIssue()`
2. **New Tasks**: Create Linear issue with proper team, priority, and labels using `LinearClient.createIssueFromTestFlight()`
3. **During Development**: Update issue status to "In Progress" using `LinearClient.updateIssueStatus()`
4. **Code Reviews**: Reference issue ID in PR title and description
5. **Completion**: Mark issue as "Done" and add completion comment using `LinearClient.addCommentToIssue()`

### Issue Creation Standards
- **Title**: Clear, actionable description (e.g., "TF-001: TestFlight Connect API integration")
- **Description**: Include acceptance criteria, technical approach, and context
- **Labels**: Apply appropriate labels (Feature, Bug, Improvement, Research)
- **Priority**: Set based on project roadmap (Urgent, High, Medium, Low)
- **Team**: Always assign to "TestFlight PM" team (use `LinearClient.getTeam()` to get team info)

## üèóÔ∏è Code Quality & Architecture Standards

### DRY (Don't Repeat Yourself) Enforcement
- **SCAN**: Before writing code, search existing codebase for similar functionality using `grep_search` and `codebase_search`
- **EXTRACT**: Create reusable utilities in `src/utils/` for repeated logic patterns
- **ABSTRACT**: Use TypeScript interfaces and generic types for common data structures
- **MODULARIZE**: Break down large functions into smaller, composable units
- **CONFIGURATION**: Extract magic numbers and strings into `src/config/` constants

### SOLID Principles Implementation

#### Single Responsibility Principle (SRP)
- **CLASSES**: Each class should handle only one aspect of functionality
- **MODULES**: Organize by domain (e.g., `src/api/`, `src/analysis/`, `src/integrations/`)
- **FUNCTIONS**: Functions should do one thing well, max 20 lines
- **INTERFACES**: Define focused contracts for specific use cases

#### Open/Closed Principle (OCP)
- **EXTENSION**: Use composition and dependency injection over inheritance
- **PLUGINS**: Design plugin-style architecture for integrations (`src/integrations/`)
- **STRATEGY**: Implement strategy pattern for varying algorithms (analysis, formatting)
- **CONFIGURATION**: Make behavior configurable rather than hardcoded

#### Liskov Substitution Principle (LSP)
- **CONTRACTS**: Ensure subclasses honor parent class contracts
- **INTERFACES**: Use TypeScript interfaces to enforce substitutability
- **TESTING**: Write tests that verify substitutability of implementations
- **ERROR HANDLING**: Maintain consistent error behavior across implementations

#### Interface Segregation Principle (ISP)
- **FOCUSED**: Create small, client-specific interfaces
- **COMPOSITION**: Compose larger interfaces from smaller ones when needed
- **CLIENTS**: Don't force clients to depend on methods they don't use
- **API DESIGN**: Design APIs with minimal required methods

#### Dependency Inversion Principle (DIP)
- **ABSTRACTIONS**: Program to interfaces, not concrete implementations
- **INJECTION**: Use dependency injection for external services (APIs, databases)
- **FACTORIES**: Use factory patterns for complex object creation
- **MOCKING**: Enable easy testing through abstraction layers

## üõ†Ô∏è Technology Stack Standards

### Bun-First Development
- **RUNTIME**: Always use `bun` instead of Node.js, npm, or pnpm
- **TESTING**: Use `bun:test` framework exclusively
- **APIS**: Prefer Bun built-ins (`bun:sqlite`, `Bun.serve`, `Bun.file`)
- **MODULES**: Use native ES modules and TypeScript

### Database & Storage
- **PRIMARY**: Use `bun:sqlite` for local data persistence
- **MIGRATIONS**: Create versioned schema migrations in `src/repository/migrations/`
- **QUERIES**: Use type-safe query builders or prepared statements
- **TRANSACTIONS**: Wrap related operations in database transactions

### API Integration Standards
- **ERROR HANDLING**: Implement retry logic with exponential backoff
- **RATE LIMITING**: Respect API rate limits with proper queuing
- **AUTHENTICATION**: Securely store and refresh API tokens
- **TYPES**: Create TypeScript types for all API responses

### Security & Secret Management Standards
- **SECRET STORAGE**: All sensitive data MUST be stored in GitHub repository secrets or environment variables
- **NO HARDCODED SECRETS**: Never commit API keys, tokens, or credentials to repository
- **JWT HANDLING**: Implement secure JWT token generation and refresh for App Store Connect API
- **ENVIRONMENT ISOLATION**: Use different secrets for development, staging, and production environments
- **SECRET ROTATION**: Implement automatic secret rotation where possible
- **AUDIT LOGGING**: Log all API authentication attempts and secret access (without exposing values)
- **LEAST PRIVILEGE**: Grant minimum required permissions for API access
- **SECURE TRANSMISSION**: All API communications must use HTTPS/TLS encryption
- **SECRET VALIDATION**: Validate secret format and permissions before use
- **ERROR HANDLING**: Never expose secret values in error messages or logs

## üìÅ Project Structure Standards

### Directory Organization
```
src/
‚îú‚îÄ‚îÄ api/           # External API clients (TestFlight, GitHub, Linear)
‚îú‚îÄ‚îÄ analysis/      # Code analysis and correlation logic
‚îú‚îÄ‚îÄ cli/           # Command-line interface components
‚îú‚îÄ‚îÄ config/        # Configuration management and constants
‚îú‚îÄ‚îÄ integrations/  # Plugin-style integrations with external services
‚îú‚îÄ‚îÄ repository/    # Database models, migrations, and data access
‚îî‚îÄ‚îÄ utils/         # Shared utilities and helper functions
```

### File Naming Conventions
- **KEBAB-CASE**: Use kebab-case for file names (`testflight-client.ts`)
- **DESCRIPTIVE**: Use descriptive names that indicate purpose
- **EXTENSIONS**: Always use `.ts` extension for TypeScript files
- **TESTS**: Co-locate test files with `.test.ts` suffix

### Import/Export Standards
- **EXPLICIT**: Use explicit imports/exports, avoid `export *`
- **BARREL**: Create index files for clean module exports
- **ABSOLUTE**: Use absolute imports from project root when possible
- **ORDERING**: Order imports: built-ins, external, internal

## üß™ Testing & Quality Standards

### Test Coverage Requirements
- **MINIMUM**: 80% code coverage for all new code
- **CRITICAL**: 100% coverage for API integrations and data processing
- **TYPES**: Unit tests for pure functions, integration tests for API calls
- **MOCKING**: Mock external dependencies for isolated testing

### Code Review Standards
- **REQUIRED**: All code changes must go through PR review
- **CHECKLIST**: Verify DRY/SOLID principles in review comments
- **LINEAR**: Reference Linear issue in PR description
- **TESTS**: Ensure tests are included and passing

### Documentation Standards
- **JSDOC**: Document all public functions and classes
- **README**: Keep README.md updated with setup and usage instructions
- **ARCHITECTURE**: Document architectural decisions in `docs/`
- **LINEAR**: Keep Linear issues updated with progress and blockers

## üö® Enforcement & Monitoring

### Pre-commit Checks
- Run `bun test` to ensure all tests pass
- Verify Linear issue is referenced in commit message
- Check for code duplication using static analysis
- Validate TypeScript compilation with strict mode

### Continuous Integration
- **BUILD**: Ensure project builds successfully with `bun build`
- **TESTS**: Run full test suite with coverage reporting
- **LINTING**: Enforce code style and complexity rules
- **SECURITY**: Scan for security vulnerabilities in dependencies

### Performance Standards
- **API CALLS**: Target < 2 seconds for external API calls
- **PROCESSING**: Process TestFlight data within 5 minutes
- **MEMORY**: Monitor memory usage for large dataset processing
- **STARTUP**: Application startup time < 5 seconds

## üîÑ Workflow Integration

### Development Workflow
1. **PLANNING**: Check Linear for task details and acceptance criteria
2. **BRANCHING**: Create feature branch with Linear issue ID (`feature/VJ-##-description`)
3. **DEVELOPMENT**: Follow DRY/SOLID principles and project standards
4. **TESTING**: Write comprehensive tests and ensure coverage
5. **REVIEW**: Submit PR with Linear issue reference
6. **COMPLETION**: Update Linear issue status and add completion notes

### Release Management
- **VERSIONING**: Use semantic versioning for releases
- **CHANGELOG**: Maintain CHANGELOG.md with Linear issue references
- **DEPLOYMENT**: Automate deployment through GitHub Actions
- **MONITORING**: Track post-deployment metrics and issues

---

*These rules ensure consistent, maintainable code while keeping Linear as the authoritative project management source.*


*These rules ensure consistent, maintainable code while keeping Linear as the authoritative project management source.*
